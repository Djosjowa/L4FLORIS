function [ P,Ptot,Dw,Ut,yw,Dwn,Up,I,Ic] = FLORIS_GT_test(U,yaw,rho,ai,lf,PP,A,m_e,k_e,a_d,b_d,k_d,M_U,a_U,b_U,X,Y,N,D)            
%% Wake Deflection
        %Determine the wake deflection     
        Ct = 4*ai*(1-ai);       % Power coefficient
        
        for i = 1:N-1
            for j = i+1:N
                yw(i,i) = Y(i);
                % Angle of wake-centerline
                epsi_init(i) = 0.5 * cos(yaw(i))^2 * sin(yaw(i)) * Ct;
                % Yaw-induced lateral offset
                dy_w_yaw_1(i) = (epsi_init(i) * (15 * (2*k_d*(X(j) - X(i))/D + 1)^4 + epsi_init(i)^2))/((30 * k_d / D) * (2 * k_d * ((X(j) - X(i))/D) + 1)^5);
                dy_w_yaw_2(i) = (epsi_init(i) * D * (15 + epsi_init(i)^2))/(30 * k_d);
                dy_w_yaw(i) = dy_w_yaw_1(i) - dy_w_yaw_2(i);
                % Lateral wake deflection (also present with yaw = 0)
                dy_w_rot(i) = a_d + b_d*(X(j) - X(i));
                % Wake deflection
                yw(i,j) = dy_w_yaw(i) + dy_w_rot(i) + Y(i);  
            end
        end

%% Wake diameter expansion
    %Wake diameters of regions 1 t/m 3 of the i-th turbine per j-th
    %turbine
    for i=1:N
        for j = i+1:N 
            for q = 1:3
                Dw(i,j,q) = max(D + 2*k_e*m_e(q)*(X(j)-X(i)),0);      
            end        
        end
        Dw(i,i,:) = D;
    end
%% Wake deficit Decay
    %Wake deficit decay of region 1 /tm 3 of the i-th turbine per j-th
    %turbine
    for i = 1:N  
       for q = 1:3   
                m_U(i,q) = M_U(q)/cosd(a_U + b_U*yaw(i)*(180/pi));

            for j = i+1:N
                c(i,j,q) = (D/(D + 2*k_e*m_U(i,q)*(X(j) - X(i))))^2;
            end
        end
    end
%% Wake Combination
    % Area of wake overlap of the i-th turbine per j-th turbine
    Aol=zeros(N,N,3);
    for i= 1:N
        for j=i+1:N
        Aol(i,j,3)=Overlap(yw,Dw,X,Y,i,j,3,D);
          if Aol(i,j,3) == 0
             Aol(i,j,2)=0;
             Aol(i,j,1)=0;
             continue
          end
           Aol(i,j,2)=Overlap(yw,Dw,X,Y,i,j,2,D);
%           if Aol(i,j,2) == 0
%              Aol(i,j,1)=0;
%              continue
%           end
          Aol(i,j,1)=Overlap(yw,Dw,X,Y,i,j,1,D);
%           if Aol(i,j,1) == 0;
%              continue
%           end
          Aol(i,j,2)=Aol(i,j,2)-Aol(i,j,1);
          Aol(i,j,3)=Aol(i,j,3)-Aol(i,j,2)-Aol(i,j,1);
       end    
    end

    % Upstream (Up) and downstream(Dwn) turbines
    m=0;
    n=0;
    for j=1:N
        s = 0;
        for i=1:N
            for q=1:3
                s = s+Aol(i,j,q);   
            end
        end
        if s==0
            m=m+1;
            Up(m)=j;
        else
            n=n+1;
            Dwn(n)=j;
        end
    end

    %Determining the effective wind speed at the upstream turbines.
    Uup=zeros(N,1);
    for i=1:length(Up)
        a = Up(i);
        Uup(a)=U(1);
    end
    
    %Determining the effective wind speeds at the downstream turbines.
    Udown=zeros(N,1);
    Oup=zeros(length(Up),1);
    I=zeros(length(Dwn),1);
    rel_WT=zeros(length(Dwn),1);
    
    % find the index of the turbine in set DwnUp for which turbine j has the largest overlap
    DwnUp = [1:N-1];
    Oupwind = zeros(N,N);
    d_sens = 1;
    d_penalty = zeros(N,N);
    for i = N:-1:2
        for j = i-1:-1:1
            %Penalty for distance
            d_inter = 1.5;              %Sensitivity parameter >= 1
            d_penalty(j,i) = 1/((X(i)-X(j))^d_inter);
            %Determine overlapping surfaces generated by upwind turbines
            Oupwind(j,i)=Aol(j,i,3)+Aol(j,i,2)+Aol(j,i,1);
        end
    end
    % Set all infinity to zero
    d_penalty(d_penalty == Inf) = 0;
    for i = 1:N
        for j = i+1:N
            %Multiply with penalty
            Oupwind(i,j) = Oupwind(i,j)*d_penalty(i,j);
        end
    end
    % Flip matrix for correct processing by max_function
    Oupwind = fliplr(Oupwind');
    [~,ext] = max(Oupwind,[],2);
    % Determine most important upwind turbine
    Ic = NaN(1,length(Dwn))'; 
    for i = 1: length(Dwn)
        Ic(i) = (N+1)-ext(Dwn(i));
    end
    
    
    % find the index of the turbine in set Up for which turbine j has the largest overlap
    for j= 1:length(Dwn)
        for i= 1:length(Up)
            a = Up(i);
            b = Dwn(j);
            Oup(i)=Aol(a,b,3)+Aol(a,b,2)+Aol(a,b,1);
        end 
%------------------------------------------------------------------------%        
        % Algorithm such that closeby WT is selected
%------------------------------------------------------------------------%
        [~,I(j)]=max(Oup);               
    end
    
    for j= 1:length(Dwn)
       Q=0;
       for i= 1:(Dwn(j)-1)
           G=0;
           for q= 1:3
               G=G+c(i,Dwn(j),q)*min((Aol(i,Dwn(j),q)/A),1);
           end
           Q=Q+(ai*G)^2;
       end
        Udown(Dwn(j))= Uup(Up(I(j)))*(1-2*sqrt(Q));
%         Udown(Dwn(j))= Uup(DwnUp(Ic(j)))*(1-2*sqrt(Q));
%         Uup(Dwn(j)) = Udown(Dwn(j));
    end
    % Creating vector Ut with the effective wind speeds for each turbine.
    Ut=Uup+Udown;

%% Calculate Power coefficients, Power and total Power
    %Initialize power parameters
    Cp   = zeros(N,1);
    Ptot = 0;
    P = zeros(N,1);
    % Calculate power parameters
    for i = 1:N    
        Cp(i)  = 4*ai*(1-ai)^2*lf*(cos(yaw(i))^PP);     % Power Coefficient  [-]
        P(i)   = 0.5*rho*A*Cp(i)*Ut(i)^3;               % Turbine Power      [MW]
        Ptot   = Ptot + P(i);                           % Wind Farm Power    [MW]
    end
end